import { app, Tray, Menu, nativeImage, shell } from "electron"
import { join } from "path"
import { getWindowByName, WindowName } from "../window/utils/ipc-controller.ts"
import { screenRecorder } from "../ffmpeg.ts"
import { ExposedWinMain } from "../window/ipc-handlers/definitions/renderer.ts"
import { RecordingStatus } from "@/deinitions/ffmpeg.ts"
import { updatePositionByAria } from "../window/ipc-handlers/ipc-win-select-aria.ts"

export class TrayManager {
    private static instance: TrayManager
    private tray: Tray | null = null
    private isDarwin = process.platform === "darwin"

    private constructor() {}

    public static getInstance(): TrayManager {
        if (!TrayManager.instance) {
            TrayManager.instance = new TrayManager()
        }
        return TrayManager.instance
    }

    private createIcon() {
        const isDev = !app.isPackaged
        const iconFileName = "camera.png"

        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏–∫–æ–Ω–∫—É –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –º–µ—Å—Ç–∞—Ö (–æ—Å–æ–±–µ–Ω–Ω–æ –≤–∞–∂–Ω–æ –¥–ª—è —Å–æ–±—Ä–∞–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏)
        const candidates = isDev
            ? [
                join(process.cwd(), "src/assets", iconFileName),
            ]
            : [
                // 1) –ò–∫–æ–Ω–∫–∞, –≤–∫–ª—é—á—ë–Ω–Ω–∞—è –≤ asar –∫–∞–∫ src/assets/*
                join(app.getAppPath(), "src/assets", iconFileName),
                // 2) –ò–∫–æ–Ω–∫–∞, —Å–æ–±—Ä–∞–Ω–Ω–∞—è –≤ dist/assets (—Ä–µ–Ω–¥–µ—Ä –±–∞–Ω–¥–ª)
                join(app.getAppPath(), "dist/assets", iconFileName),
                // 3) –Ø–≤–Ω—ã–µ –ø—É—Ç–∏ —á–µ—Ä–µ–∑ resources (asar/asar.unpacked)
                join(process.resourcesPath, "app.asar", "src/assets", iconFileName),
                join(process.resourcesPath, "app.asar", "dist/assets", iconFileName),
                // 4) –í–Ω–µ—à–Ω–∏–µ —Ä–µ—Å—É—Ä—Å—ã (–Ω–∞ —Å–ª—É—á–∞–π —Ä—É—á–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è)
                join(process.resourcesPath, "assets", iconFileName),
            ]

        let icon = null as Electron.NativeImage | null
        for (const p of candidates) {
            const img = nativeImage.createFromPath(p)
            if (!img.isEmpty()) {
                icon = img
                break
            }
            console.warn("Tray icon not found at path:", p)
        }

        if (!icon) {
            // –ü–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–Ω—Å: —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é –∏–∫–æ–Ω–∫—É, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å
            icon = nativeImage.createEmpty()
        }

        // –î–ª—è macOS –≤–∫–ª—é—á–∞–µ–º template, —á—Ç–æ–±—ã –∏–∫–æ–Ω–∫–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–ª–∞—Å—å –≤ –º–µ–Ω—é-–±–∞—Ä–µ
        if (this.isDarwin) {
            icon.setTemplateImage(true)
            return icon.resize({ width: 22, height: 22 })
        }
        return icon.resize({ width: 16, height: 16 })
    }

    public createTray(): void {
        try {
            this.tray = new Tray(this.createIcon())
            this.tray.setToolTip("DST Recorder")

            this.updateMenu()

            // –ù–∞ macOS –∫–ª–∏–∫ –ø–æ —Ç—Ä–µ—é –æ–±—ã—á–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é
            // –ù–∞ –¥—Ä—É–≥–∏—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞—Ö - –ø—Ä–∞–≤—ã–π –∫–ª–∏–∫
            if (this.isDarwin) {
                this.tray.on("click", () => this.tray?.popUpContextMenu())
                this.tray.on("right-click", () => this.tray?.popUpContextMenu())
            }
        } catch (error) {
            console.error("Error creating tray:", error)
        }
    }

    public updateMenu(status?: RecordingStatus): void {
        if (!this.tray) return

        if (status?.isRecording) {
            this.tray.setContextMenu(this.getRecordingMenu())
            if (this.isDarwin) this.tray?.setTitle(this.getFormattedDuration(status.duration))
        } else {
            this.tray.setContextMenu(this.getDefaultMenu())
            if (this.isDarwin) this.tray?.setTitle("")
        }
    }

    private getDefaultMenu(): Menu {
        const { crop, video, audio } = screenRecorder.getSettings()
        return Menu.buildFromTemplate([
            {
                label: "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å",
                click: () => this.startRecording(),
            },
            {
                label:   `-–í–∏–¥–µ–æ: ${video?.label} (${crop.w}*${crop.h})`,
                enabled: false,
            },
            {
                label:   `-–ó–≤—É–∫:    ${audio?.name}`,
                enabled: false,
            },
            {
                type: "separator",
            },
            {
                label: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                click: () => this.openSettings(),
            },
            {
                label: "‚è±Ô∏è –¢–∞–π–º–µ—Ä",
                click: () => this.openTimer(),
            },
            {
                label: "üìê–û–±–ª–∞—Å—Ç—å",
                click: () => this.openAria(),
            },
            {
                label: "üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å –∑–∞–ø–∏—Å—è–º–∏",
                click: () => this.openRecordingsFolder(),
            },
            {
                type: "separator",
            },
            {
                label: "–í—ã—Ö–æ–¥",
                click: () => this.quitApp(),
            },
        ])
    }

    private getRecordingMenu(): Menu {
        return Menu.buildFromTemplate([
            {
                label: "‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å",
                click: () => this.stopRecording(),
            },
            {
                type: "separator",
            },
            {
                label: "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏",
                click: () => this.openSettings(),
            },
            {
                label: "‚è±Ô∏è –¢–∞–π–º–µ—Ä",
                click: () => this.openTimer(),
            },
            {
                label: "üìÇ –û—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É —Å –∑–∞–ø–∏—Å—è–º–∏",
                click: () => this.openRecordingsFolder(),
            },
            {
                type: "separator",
            },
            {
                label: "–í—ã—Ö–æ–¥",
                click: () => this.quitApp(),
            },
        ])
    }

    private async startRecording(): Promise<void> {
        try {
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –æ–∫–Ω–∞ –ø–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º –∑–∞–ø–∏—Å–∏
            const mainWindow = getWindowByName(WindowName.Main)
            const timerWindow = getWindowByName(WindowName.Timer)

            if (mainWindow?.isVisible()) mainWindow.hide()
            if (timerWindow?.isVisible()) timerWindow.hide()

            // –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–ø–∏—Å—å
            const result = await screenRecorder.startRecording()
            if (result?.error) {
                console.error("Failed to start recording:", result.error)
                return
            }

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ —Ç–∞–π–º–µ—Ä–∞
            // if (timerWindow) timerWindow.show()
        } catch (error) {
            console.error("Error starting recording:", error)
        }
    }

    private async stopRecording(): Promise<void> {
        await screenRecorder.stopRecording()

        // –°–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ —Ç–∞–π–º–µ—Ä–∞
        // const timerWindow = getWindowByName(WindowName.Timer)
        // if (timerWindow) timerWindow.hide()
    }

    private openSettings(): void {
        const mainWindow = getWindowByName(WindowName.Main)
        if (mainWindow) {
            mainWindow.show()
            mainWindow.webContents.send(ExposedWinMain.SHOW)
        }
    }

    private openTimer(): void {
        const timerWindow = getWindowByName(WindowName.Timer)
        if (timerWindow) timerWindow.show()
    }

    private openAria(): void {
        const ariaWindow = getWindowByName(WindowName.SelectAria)
        if (ariaWindow) {
            // –¥–ª—è –ø–µ—Ä–µ–æ—Ç—Ä—ã—Ç–∏—è –Ω–∞ –Ω—É–∂–Ω–æ–º —ç–∫—Ä–∞–Ω–µ
            ariaWindow.hide()
            getWindowByName(WindowName.Timer)?.hide()

            ariaWindow.show()
            updatePositionByAria(ariaWindow)
        }
    }

    private openRecordingsFolder(): void {
        const recordingsPath = screenRecorder.getSettings()?.outputPath
        if (recordingsPath) shell.openPath(recordingsPath)
    }

    private quitApp(): void {
        // –ï—Å–ª–∏ –∏–¥–µ—Ç –∑–∞–ø–∏—Å—å, —Å–Ω–∞—á–∞–ª–∞ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
        if (screenRecorder.getIsRecording()) {
            this.stopRecording().then(() => app.quit())
        } else {
            app.quit()
        }
    }

    private getFormattedDuration(duration: number): string {
        const minutes = Math.floor(duration / 60)
        const seconds = duration % 60
        return `${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`
    }
}

export const trayManager = TrayManager.getInstance()
